    4  sudo apt-get update
    5  sudo apt-get install nodejs
    6  sudo apt install npm
    7  npm install webpack@3.0.0
    8  npm install webpack-cli@3.0.8
    9  npm install ganache-cli
   10  ls
   11  ./node_modules/.bin/ganache-cli --port 8545  --chainId 5777  -h ec2-35-86-113-181.us-west-2.compute.amazonaws.com
   12  npm install node-gyp@3.6.2
   13  npm install truffle@5.1.39
   14  npm install web3@1.0.0-beta.37
   15  npm install create-react-app
   16  ./node_modules/.bin/create-react-app  packt


NOTE: fails miserably!
ubuntu@ip-172-31-22-13:~$ ./node_modules/.bin/create-react-app  packt
You are running Node 10.19.0.
Create React App requires Node 14 or higher.
Please update your version of Node.


so now i update node



   17  node -v
   18  curl -sL https://deb.nodesource.com/setup_16.x -o nodesource_setup.sh
   19  sudo bash nodesource_setup.sh
   20  sudo apt install nodejs
   21  node -v
   22  ./node_modules/.bin/create-react-app  packt
   23  ls
   24  cd packt
   25  npm  start








copy over (only) 
test
migrate
contracts


copy over truffle-config.js from 

change the IP to update.






##### second terminal !!!


ubuntu@ip-172-31-27-113:~$ history
    1  ls
    2  ./node_modules/.bin/ganache-cli --port 8545  --chainId 5777  -h ec2-35-86-113-181.us-west-2.compute.amazonaws.com






ls
    2  cd packt/
    3  ls
    4  vi truffle-config.js
    5  npm install truffle@5.1.39
    6  ./node_modules/.bin/truffle migrate
    7  ls
    8  cd contracts
    9  ls
   10  vi Gaming.sol
   11  cd ..
   12* ./node_modules/.bin/truffle
   13  ./node_modules/.bin/truffle deploy
   14  ./node_modules/.bin/truffle test
   15  cd test
   16  ls
   17  vi TestGaming.sol
   18  ls
   19  cd ..
   20  ./node_modules/.bin/truffle test
   21  history




Compiling your contracts...
===========================
> Compiling ./test/TestGaming.sol
> Artifacts written to /tmp/test--15311-YOhefxCV936Y
> Compiled successfully using:
   - solc: 0.5.16+commit.9c3226ce.Emscripten.clang



  TestGaming
    ✓ testPlayerWonGuessHigher (82ms)
    ✓ testPlayerLostGuessLower (70ms)


  2 passing (8s)



I put a PIN in in the gaming app..

ok  - now to the voting app.....

using the contracts, test, migrate directory from the packt example.



# i still have to change the following code in the Voting.sol program...

constructor(bytes32[] memory candidateNames) public {
    candidateList = candidateNames;
  }





ec2-54-184-225-206.us-west-2.compute.amazonaws.com




/packt$ npm install web3
# make sure that you cd to the 'contracts' directory....

> Web3 = require("web3")
> web3 = new Web3( new Web3.providers.HttpProvider("http://ec2-54-184-225-206.us-west-2.compute.amazonaws.com:8545"));
>code = fs.readFileSync('Voting.sol').toString()
var solc = require('solc');
var CONTRACT_FILE = 'Voting.sol'
var content =fs.readFileSync(CONTRACT_FILE).toString()
var input = {
  language: 'Solidity',
  sources: {
    [CONTRACT_FILE]: {
      content: content
    }
  },
  settings: {
    outputSelection: {
      '*': {
        '*': ['*']
      }
    }
  }
}




var compiled = solc.compile(JSON.stringify(input))
var output = JSON.parse(compiled)
var abi = output.contracts[CONTRACT_FILE]['Voting'].abi
var bytecode = output.contracts[CONTRACT_FILE]['Voting'].evm.bytecode.object
var HelloWorld = new web3.eth.Contract(abi);


deployedContract = new web3.eth.Contract(abi)
listOfCandidates = ['Rama', 'Nick', 'Jose']





ubuntu@ip-172-31-22-13:~/packt/contracts$ npm install solc


deployedContract.deploy({
  data: bytecode,
  arguments: [listOfCandidates.map(name => web3.utils.asciiToHex(name))]
}).send({
  from: '0xAB4E7550C568E6B10d88F7FBD182048791773652',
  gas: 1500000,
  gasPrice: web3.utils.toWei('0.00003', 'ether')
}).then((newContractInstance) => {
  deployedContract.options.address = newContractInstance.options.address
  console.log(newContractInstance.options.address)
});




deployedContract.methods.totalVotesFor(web3.utils.asciiToHex('Rama')).call(console.log)

deployedContract.methods.voteForCandidate(web3.utils.asciiToHex('Rama')).send({from: '0xAB4E7550C568E6B10d88F7FBD182048791773652'}).then((f) => console.log(f))

deployedContract.methods.totalVotesFor(web3.utils.asciiToHex('Rama')).call(console.log)




> deployedContract.methods.voteForCandidate(web3.utils.asciiToHex('Rama')).send({from: '0xAB4E7550C568E6B10d88F7FBD182048791773652'}).then((f) => console.log(f))
Promise {
  <pending>,
  [Symbol(async_id_symbol)]: 1780,
  [Symbol(trigger_async_id_symbol)]: 1764,
  [Symbol(destroyed)]: { destroyed: false }
}
> {
  transactionHash: '0x1ba9a7562d72ba2158d318ecf323b6a57e62f10b802c9f98b1d7ef5167ddbca9',
  transactionIndex: 0,
  blockHash: '0x1be6161a06e470c76e05417f00e584a5ea1cb6b024fd64187071a8408f23ef66',
  blockNumber: 2,
  from: '0xab4e7550c568e6b10d88f7fbd182048791773652',
  to: '0x7cbcd0ebcd9e5e8903bac1a78c0604ed1c16b05b',
  gasUsed: 45953,
  cumulativeGasUsed: 45953,
  contractAddress: null,
  status: true,
  logsBloom: '0x
  events: {}
}

> deployedContract.methods.voteForCandidate(web3.utils.asciiToHex('Rama')).send({from: '0xAB4E7550C568E6B10d88F7FBD182048791773652'}).then((f) => console.log(f))
Promise {
  <pending>,
  [Symbol(async_id_symbol)]: 1889,
  [Symbol(trigger_async_id_symbol)]: 1873,
  [Symbol(destroyed)]: { destroyed: false }
}
> {
  transactionHash: '0x4021a9a114a5027c1bba9265b2dcb218054a2dc92f2c8ce3960f7fdc2378cad0',
  transactionIndex: 0,
  blockHash: '0x4a7f62a3fc0f6d40c01141e79d6829d463c108236189ea5763ece362927f9ead',
  blockNumber: 3,
  from: '0xab4e7550c568e6b10d88f7fbd182048791773652',
  to: '0x7cbcd0ebcd9e5e8903bac1a78c0604ed1c16b05b',
  gasUsed: 30953,
  cumulativeGasUsed: 30953,
  contractAddress: null,
  status: true,
  logsBloom: '0x
  events: {}
}

> deployedContract.methods.voteForCandidate(web3.utils.asciiToHex('Rama')).send({from: '0xAB4E7550C568E6B10d88F7FBD182048791773652'}).then((f) => console.log(f))
Promise {
  <pending>,
  [Symbol(async_id_symbol)]: 1984,
  [Symbol(trigger_async_id_symbol)]: 1970,
  [Symbol(destroyed)]: { destroyed: false }
}
> {
  transactionHash: '0x2e2c34854448e2b680bcb3b37615b0fe1135ad006e79c3f0df9edca8f1144c2e',
  transactionIndex: 0,
  blockHash: '0x4b1829ea87e5cd2682d45d7c3e0dd3ad6f47ad9707cec9d2a8cbf75705e8b743',
  blockNumber: 4,
  from: '0xab4e7550c568e6b10d88f7fbd182048791773652',
  to: '0x7cbcd0ebcd9e5e8903bac1a78c0604ed1c16b05b',
  gasUsed: 30953,
  cumulativeGasUsed: 30953,
  contractAddress: null,
  status: true,
  logsBloom: '0x
  events: {}
}

>
> deployedContract.methods.totalVotesFor(web3.utils.asciiToHex('Rama')).call(console.log)
Promise {
  <pending>,
  [Symbol(async_id_symbol)]: 2076,
  [Symbol(trigger_async_id_symbol)]: 5,
  [Symbol(destroyed)]: { destroyed: false }
}
> null 3

> deployedContract.methods.voteForCandidate(web3.utils.asciiToHex('Rama')).send({from: '0xAB4E7550C568E6B10d88F7FBD182048791773652'}).then((f) => console.log(f))
Promise {
  <pending>,
  [Symbol(async_id_symbol)]: 2132,
  [Symbol(trigger_async_id_symbol)]: 2116,
  [Symbol(destroyed)]: { destroyed: false }
}
> {
  transactionHash: '0x1b7d159f92f358946540cfc03ade6c21d1ed087aa3724f3b6b290e171f8fbb04',
  transactionIndex: 0,
  blockHash: '0x85629dedf409777c7ce680313f49150e64a663b7f4c85b1b5608090ad9bdeae2',
  blockNumber: 5,
  from: '0xab4e7550c568e6b10d88f7fbd182048791773652',
  to: '0x7cbcd0ebcd9e5e8903bac1a78c0604ed1c16b05b',
  gasUsed: 30953,
  cumulativeGasUsed: 30953,
  contractAddress: null,
  status: true,
  logsBloom: '0x
  events: {}
}
> deployedContract.methods.voteForCandidate(web3.utils.asciiToHex('Rama')).send({from: '0xAB4E7550C568E6B10d88F7FBD182048791773652'}).then((f) => console.log(f))
Promise {
  <pending>,
  [Symbol(async_id_symbol)]: 2223,
  [Symbol(trigger_async_id_symbol)]: 2209,
  [Symbol(destroyed)]: { destroyed: false }
}
> {
  transactionHash: '0xd5ca59622674e820c5cb39c847e2a4f9dffe45091cb8b5a302955f2c57bb6b52',
  transactionIndex: 0,
  blockHash: '0x03811fb377a358498422cd9d5dba3d203ef2a9393fec3d435a69363dc1303676',
  blockNumber: 6,
  from: '0xab4e7550c568e6b10d88f7fbd182048791773652',
  to: '0x7cbcd0ebcd9e5e8903bac1a78c0604ed1c16b05b',
  gasUsed: 30953,
  cumulativeGasUsed: 30953,
  contractAddress: null,
  status: true,
  logsBloom: '0x
  events: {}
}
> deployedContract.methods.voteForCandidate(web3.utils.asciiToHex('Rama')).send({from: '0xAB4E7550C568E6B10d88F7FBD182048791773652'}).then((f) => console.log(f))
Promise {
  <pending>,
  [Symbol(async_id_symbol)]: 2312,
  [Symbol(trigger_async_id_symbol)]: 2298,
  [Symbol(destroyed)]: { destroyed: false }
}
> {
  transactionHash: '0x94d727f93fcb284e88b3edd774e1fd93e3ec6fa57cce37ba6fddab69288bfe07',
  transactionIndex: 0,
  blockHash: '0x14b7989be64ef9400755b4f07bf334499f24cac0a57ec6cb6c6e1adfa77709e9',
  blockNumber: 7,
  from: '0xab4e7550c568e6b10d88f7fbd182048791773652',
  to: '0x7cbcd0ebcd9e5e8903bac1a78c0604ed1c16b05b',
  gasUsed: 30953,
  cumulativeGasUsed: 30953,
  contractAddress: null,
  status: true,
  logsBloom: '0x
  events: {}
}
> deployedContract.methods.voteForCandidate(web3.utils.asciiToHex('Rama')).send({from: '0xAB4E7550C568E6B10d88F7FBD182048791773652'}).then((f) => console.log(f))
Promise {
  <pending>,
  [Symbol(async_id_symbol)]: 2401,
  [Symbol(trigger_async_id_symbol)]: 2387,
  [Symbol(destroyed)]: { destroyed: false }
}
> {
  transactionHash: '0xba86e6d6a4f1bf3f9a269253211387378a182796f30205842ad2dabddbdadb51',
  transactionIndex: 0,
  blockHash: '0x02f07804fdb4b0a97aa6c1730ace7180b167bc45f69abd08230077aafe493cc5',
  blockNumber: 8,
  from: '0xab4e7550c568e6b10d88f7fbd182048791773652',
  to: '0x7cbcd0ebcd9e5e8903bac1a78c0604ed1c16b05b',
  gasUsed: 30953,
  cumulativeGasUsed: 30953,
  contractAddress: null,
  status: true,
  logsBloom: '0x
  events: {}
}

> deployedContract.methods.totalVotesFor(web3.utils.asciiToHex('Rama')).call(console.log)
Promise {
  <pending>,
  [Symbol(async_id_symbol)]: 2496,
  [Symbol(trigger_async_id_symbol)]: 5,
  [Symbol(destroyed)]: { destroyed: false }
}
> null 7











starting up on december 22, 2021....



34.220.74.145
ec2-34-220-74-145.us-west-2.compute.amazonaws.com




 ./node_modules/.bin/ganache-cli --port 8545  --chainId 5777 -h ec2-34-220-74-145.us-west-2.compute.amazonaws.com


now i am going to deploy directly from the node console....
(vs using truffle)

then test the application of writing /reading from the web app (dapp)



# make sure that you cd to the 'contracts' directory....

> Web3 = require("web3")
> web3 = new Web3( new Web3.providers.HttpProvider("http://ec2-34-220-74-145.us-west-2.compute.amazonaws.com:8545"));
>code = fs.readFileSync('Voting.sol').toString()
var solc = require('solc');
var CONTRACT_FILE = 'Voting.sol'
var content =fs.readFileSync(CONTRACT_FILE).toString()
var input = {
  language: 'Solidity',
  sources: {
    [CONTRACT_FILE]: {
      content: content
    }
  },
  settings: {
    outputSelection: {
      '*': {
        '*': ['*']
      }
    }
  }
}




var compiled = solc.compile(JSON.stringify(input))
var output = JSON.parse(compiled)
var abi = output.contracts[CONTRACT_FILE]['Voting'].abi
var bytecode = output.contracts[CONTRACT_FILE]['Voting'].evm.bytecode.object
var HelloWorld = new web3.eth.Contract(abi);


deployedContract = new web3.eth.Contract(abi)
listOfCandidates = ['Rama', 'Nick', 'Jose']





ubuntu@ip-172-31-22-13:~/packt/contracts$ npm install solc


deployedContract.deploy({
  data: bytecode,
  arguments: [listOfCandidates.map(name => web3.utils.asciiToHex(name))]
}).send({
  from: '0x80CCd435f188837fBB812cedd474BB616e7e0070',
  gas: 1500000,
  gasPrice: web3.utils.toWei('0.00003', 'ether')
}).then((newContractInstance) => {
  deployedContract.options.address = newContractInstance.options.address
  console.log(newContractInstance.options.address)
});




deployedContract.methods.totalVotesFor(web3.utils.asciiToHex('Rama')).call(console.log)

deployedContract.methods.voteForCandidate(web3.utils.asciiToHex('Rama')).send({from: '0x80CCd435f188837fBB812cedd474BB616e7e0070'}).then((f) => console.log(f))

deployedContract.methods.totalVotesFor(web3.utils.asciiToHex('Rama')).call(console.log)





to run in the web app  - i need the abi definition AND	 the deployed contract address

from node console:

node> deployedContract

(obtain address)



( now update in the web app...)
		contract.options.address = "0xac8E281442B27A430539b94b3dafeb487e053E60";









add 'const'
npm install jquery


https://github.com/webpack/webpack/issues/11868






ubuntu@ip-172-31-19-72:~$ ./node_modules/.bin/create-react-app  packt

You are running `create-react-app` 4.0.3, which is behind the latest release (5.0.0).

We no longer support global installation of Create React App.

Please remove any global installs with one of the following commands:
- npm uninstall -g create-react-app
- yarn global remove create-react-app

The latest instructions for creating a new app can be found here:
https://create-react-app.dev/docs/getting-started/







circular problem

create-react-app wants node > 14.0.0 or higher

node >14.0.0 and create-react-app@5.0.0 will give a slew of problems with web3 
so DONT USE IT


I backed up to 4.0.3 then up to two years old 3.4.1 ( which DID INSTALL ) I will stay on it until FB gets their act together!






ubuntu@ip-172-31-27-120:~/packt2$ history
    1  ls
    2  pwd
    3  sudo apt-get update
    4  sudo apt-get install nodejs
    5  sudo apt install npm
    6  npm install webpack@3.0.0
    7  npm install webpack-cli@3.0.8
    8  npm install ganache-cli
    9  npm install node-gyp@3.6.2
   10  npm install truffle@5.1.39
   11  npm install web3@1.0.0-beta.37
   12  npm install create-react-app@3.4.1
   13  ./node_modules/.bin/create-react-app  packt

You are running Node 10.19.0.
Create React App requires Node 14 or higher.
Please update your version of Node.




   14  ls
   15  cd packt
   16  ls
   17  npm start
   18  node -v
   19  curl -sL https://deb.nodesource.com/setup_16.x -o nodesource_setup.sh
   20  sudo bash nodesource_setup.sh
   21  sudo apt install nodejs
   22  node -v
   23  ./node_modules/.bin/create-react-app  packt
   24  cd ..
   25  ./node_modules/.bin/create-react-app  packt
   26  ./node_modules/.bin/create-react-app  packt2
   27  npm start
   28  cd packt2
   29  npm start
   30  history


fix 1: 


https://github.com/facebook/create-react-app/issues/11756

module.exports = {
    resolve: {
        fallback: {
            assert: require.resolve('assert'),
            crypto: require.resolve('crypto-browserify'),
            http: require.resolve('stream-http'),
            https: require.resolve('https-browserify'),
            os: require.resolve('os-browserify/browser'),
            stream: require.resolve('stream-browserify'),
        },
    },
};
using;

"dependencies": {
    "@testing-library/jest-dom": "^5.16.1",
    "@testing-library/react": "^12.1.2",
    "@testing-library/user-event": "^13.5.0",
    "react": "^17.0.2",
    "react-dom": "^17.0.2",
    "react-scripts": "5.0.0",
    "web-vitals": "^2.1.2",
    "web3": "^1.6.1"
  },
but also need but got compilation errors on the build process:

FATAL ERROR: Ineffective mark-compacts near heap limit Allocation failed - JavaScript heap out of memory" error
this was resolved by adding to my .env file;

GENERATE_SOURCEMAP=false




fix 2: 
https://stackoverflow.com/questions/63195843/webpack-module-warning-failed-to-parse-source-map-from-data-url


                            options: {

                                filterSourceMappingUrl: (url, resourcePath) => {
                                    //  console.log({ url, resourcePath }) example:
                                    // {
                                    //  url: 'index.js.map',
                                    //  resourcePath: '/repos/xlib-wsl/common/temp/node_modules/.pnpm/https-proxy-agent@5.0.0/node_modules/https-proxy-agent/dist/index.js'
                                    // }

                                    if (/.*\/node_modules\/.*/.test(resourcePath)) {
                                        return false
                                    }
                                    return true
                                }

                            }





both in webpack-config.js



now getting browser errors: 

https://stackoverflow.com/questions/30239060/uncaught-referenceerror-process-is-not-defined

